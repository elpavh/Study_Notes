### Variables y Buenas Practicas en JavaScript

    ## ¿Qué son las variables en programación? 
        # Las variables son uno de los conceptos fundamentales en programación y se pueden imaginar como cajas etiquetadas, donde podemos
           almacenar y recuperar datos según sea necesario. Así como las cajas tienen nombres para identificar su contenido, en programación, 
           las variables también llevan un nombre descriptivo para indicar su propósito.

    ## Buenas prácticas al nombrar variables
        # Utiliza nombres descriptivos que indiquen el propósito o contenido de la variable.

        # Evita nombres ambiguos como C, D, o A.

        # Prefiere nombres largos y descriptivos sobre abreviaciones obscuras.

        # Usa abreviaciones bien conocidas como URL para "Uniform Resource Locator" o ID para "identificador".

    ## ¿Qué es let y qué es const?

        # let: Se usa para declarar variables que pueden cambiar su valor durante la ejecución del programa.

        # const: Se usa para declarar variables cuyo valor no cambiará una vez asignado.

    ## Errores comunes y recomendaciones adicionales

        # Coloca las declaraciones de variables al inicio del archivo para mayor claridad.

        # Usa comentarios para documentar partes críticas del código y evitar confusiones futuras.

        # Evita usar espacios en nombres de variables, mantén todo en un solo bloque para mejorar la legibilidad del código.

        # JavaScript también permite omitir los puntos y comas, pero algunos programadores prefieren usarlos por claridad. Cada 
           programador debe elegir un estilo coherente en todo su código.


### Tipos de datos

    ## ¿Cuáles son los tipos de datos en JavaScript?
        # JavaScript es un lenguaje poderoso y versátil con 10 tipos de datos diferentes agrupados en dos categorías principales: 
            primitivos y complejos. Esta amplia gama de tipos permite a los desarrolladores trabajar con una variedad de datos, desde 
            simples cadenas de texto hasta objetos y funciones más complejas. Comprender estos tipos de datos es esencial para cualquier
            programador que desee dominar JavaScript y aprovechar al máximo sus capacidades.

    ## Tipos de datos primitivos
        # String: Cadenas de texto encerradas en comillas simples o dobles. Ejemplo: # let nombre = 'tere';

        # Number: Datos numéricos que permiten representar valores enteros o decimales. Ejemplo: # let edad = 25;

        # Boolean: Son valores lógicos que solamente pueden ser true o false. Ideal para verificar condiciones. Ejemplo: # let esMayorDeEdad = true;

        # Null: Representa intencionalmente la ausencia de un valor. Es útil para señalar que una variable está vacía. Ejemplo: # let sinValor = null;

        # Undefined: Indica que una variable ha sido declarada pero no tiene un valor asignado. Generalmente asignado por JavaScript.  # let sinDefinir;

        # Symbol: Ofrece valores únicos, ideales para identificar propiedades de objetos de manera única. Ejemplo: # let idUsuario = Symbol('único');

        # BigInt: Permite representar números enteros grandes más allá de Number.MAX_SAFE_INTEGER. Ejemplo: # let numeroGrande = 9007199254740991;

    ## Tipos de datos complejos
        # Objetos (Object): Permiten almacenar datos como pares clave-valor. Ideal para representar entidades. Ejemplo:
            # let carro = { marca: 'Tesla', modelo: 'Model S'};
        
        # Arrays: Útiles para almacenar listas de valores. Pueden contener cualquier tipo de dato y son extensibles. Ejemplo:
            # let frutas = ['manzana', 'banano', 'uvas'];

        # Funciones (Function): Bloques de código reutilizables que ejecutan una tarea específica. Ejemplo de declaración:
            # function saludar(nombre) { console.log('Hola ' + nombre);}


### Manipulacion de strings (Escritura,Concatenacion y Substrings)

    ## ¿Qué es un string y cómo se escribe?
        # Los strings (cadenas de texto) en JavaScript son uno de los tipos de datos primitivos y se utilizan para representar y manipular texto.

    ## Creacion de String
        # En JavaScript, puedes crear un string utilizando comillas simples ('), comillas dobles ("), o backticks (`).
    
    ## Concatenacion de String
        # Puedes combinar strings utilizando el operador + o +=, o utilizando plantillas literales (template literals) con backticks.
            # let parte1 = 'Hola'; let parte2 = 'mundo';
            # let mensaje = parte1 + ', ' + parte2 + '!'; console.log(mensaje); // Salida: 'Hola, mundo!'
            # let mensaje2 = ${parte1}, ${parte2}!; console.log(mensaje2); // Salida: 'Hola, mundo!'

        # Tambien podemos concatenar string haciendo uso de las funciones join y concat
            # Ejemplo Join
                # const primeraParte = 'Hola, mi nombre es '; const segundaParte = 'Juan';
                # const presentacion2 = [primeraParte, segundaParte].join('');
                # console.log(presentacion2); // salida: Hola, mi nombre es Juan
            
             # Ejemplo concat
                # const hobbie1 = 'Leer'; const hobbie2 = 'Cantar'; const hobbie3 = 'Bailar'; 
                # const hobbies = hobbie1.concat(', ', hobbie2, ', ', hobbie3); console.log(hobbies); // salida: Leer, Cantar, Bailar
        
    ## Caracteres de escape
        # Para incluir caracteres especiales en un string, se usan secuencias de escape
            
            # Escape alternativo:
                #  const escapeAlternativo = "It's my life"; 
                # console.log(escapeAlternativo); // salida: It's my life
            
            # Barra invertida 
                # const escapeBarraInvertida = 'It\\'s my life';
                # console.log(escapeBarraInvertida); // salida: It's my life

            # Template Literals 
                # const escapeTemplateLiterals = `It's my life`;  
                # console.log(escapeTemplateLiterals); // salida: It's my life
    
    ## Salto de linea en strings
        # Para hacer salto de linea de nuestro string podemos hacer uso de la barra invertida acompañado de la n (\\n) para indicar donde 
           queremos el salto de linea, si vamos a utilizar string literals con uso de los backticks ()` solo debemos poner explicitamente 
           donde queremos el salto de linea
           
        # Ejemplo //n
            # const poema = 'La rosas son rojas,\\n' + 'el cielo es azul,\\n' + 'el azucar es dulce,\\n' + 'y tambien tu.';
            # console.log(poema); // salida: La rosas son rojas, el cielo es azul, el azucar es dulce, y tambien tu.
        
        # Ejemplo string literals (backticks)
            # const poema2 = `La rosas son rojas,
                               el cielo es azul,
                               el azucar es dulce,
                                y tambien tu.`;
            # Literalmente al usar template literals solo basta con usar los backticks y poner en las lineas de codigo donde 
                necesitas el salto de linea.
    
    ## Metodos

        # length :  Saber cuántos caracteres contiene un string, incluyendo los espacios. Ejemplo:
            # let frase = 'JavaScript es extremadamente genial';
            # console.log(frase.length); // Imprime 35
        
        # toLowerCase y toUpperCase: Transforma todo el string a minusculas o mayusculas
            # console.log(frase.toLowerCase()); // Imprime todo en minúsculas
            # console.log(frase.toUpperCase()); // Imprime todo en mayúsculas

        # substring: extrae ciertas partes de un string dependiendo de los indices especificados.
            # let subCadena = frase.substring(0, 10); //IMPORTANTE el ulitmo es el indice + 1.. (en este caso es el 9+1 = 10)
            # console.log(subCadena); // Imprime "JavaScript"
            

### Numeros y operaciones Matematicas 

    ## ¿Cuál es el tipo de dato number en JavaScript?
        # En JavaScript, el tipo de dato primitivo number es esencial para el manejo de operaciones numéricas. Aunque existen diversas 
           formas de escribir números, como enteros y decimales, todos se reconocen bajo el mismo tipo de dato: number. Esta unificación 
           facilita la manipulación y el cálculo numérico. Veamos cómo se representan en este lenguaje:

        # Enteros y decimales: Se escriben de forma diferente, pero en su naturaleza subyacente ambos son números.
            # let entero = 42;
            # let decimal = 3.14;
            # console.log(typeof entero); // "number"
            # console.log(typeof decimal); // "number"
        
        # Notación científica: En JavaScript, también podemos utilizar la notación científica para representar números. Se usa la letra e 
           para indicar una potencia de 10.
           # let cientifico = 5e3; // equivale a 5000

        # Infinity y NaN:  La representación de números infinitos usa Infinity, mientras que un cálculo o valor indefinido se representa 
            como NaN (Not a Number).
            # let infinito = Infinity;
            # let noNumero = NaN;

    ## ¿Cómo realizar operaciones aritméticas?
        # JavaScript proporciona operadores aritméticos para realizar cálculos básicos y avanzados. Entre ellos destacan:

        #  Operaciones básicas
            # Suma (+): Adición de dos números. # let suma = 5 + 3;
            # Resta (-): Diferencia entre dos números. # let resta = 10 - 6;
            # Multiplicación (*): Producto de dos números. # let multiplicacion = 2 * 3;
            # División (/): Cociente de dos números. # let division = 9 / 3;

        # Operaciones avanzadas
            # Módulo (%): Retorna el residuo de una división entre dos números. Útil para saber si un número es múltiplo de otro.
                # let modulo = 10 % 3; // resultado es 1
            # Exponenciación ()**: Eleva un número a una potencia específica.
                # let potencia = 2 ** 3; // equivale a 8
            # Raíz cuadrada (Math.sqrt): Calcula la raíz cuadrada de un número. 
                # let raizCuadrada = Math.sqrt(16); // 4
            # Valor absoluto (Math.abs): Devuelve el valor absoluto de un número.
                # let valorAbsoluto = Math.abs(-7); // 7
            # Número aleatorio (Math.random): Genera un número aleatorio entre 0 y 1.
                # let aleatorio = Math.random();
            # Redondear al numero entero cercano(Math.floor / Math.ceil)
                # let redondeo = Math.floor(3.9); // resultado 3, redondea hacia abajo 
                # let redondeo2 = Math.ceil(3.1); // resultado 4, redondea hacia arriba

        # Dilemas con la precisión
            # JavaScript a veces enfrenta problemas de precisión en operaciones decimales. Ejemplo:
                #  Al sumar 0.1 y 0.2, podríamos esperar 0.3, pero el resultado podría ser un número decimal largo y preciso.
                    # let resultado = 0.1 + 0.2;
                    # console.log(resultado); // Imprime algo como 0.30000000000000004

                # Para redondear resultados a un número fijo de decimales, podemos utilizar .toFixed().
                    # console.log(resultado.toFixed(2)); // "0.30"

                
### Conversion de tipos en JavaScript: Implicita y Explicita

    ## ¿Qué es la conversión de tipos en JavaScript?
        # La conversión de tipos es un concepto fundamental en JavaScript, un lenguaje de programación caracterizado por su 
           flexibilidad y capacidad para adaptarse a diferentes tipos de datos durante la ejecución del código. Este proceso es 
           esencial porque el código que escribimos como seres humanos debe ser traducido para que sea comprensible para el programa 
           de ordenador. JavaScript, un lenguaje interpretado, maneja esta conversión de manera dinámica, lo que significa que decide
           cómo tratar los tipos de datos sobre la marcha, mientras el código se ejecuta.

    ## ¿Cómo funciona JavaScript como lenguaje interpretado?
        # JavaScript es un ejemplo clásico de un lenguaje interpretado. A diferencia de los lenguajes compilados como C o Swift, donde 
          el código es traducido completamente antes de ejecutarse, JavaScript traduce su código conforme se ejecuta. Esto se asemeja a 
          tener a alguien traduciendo instrucciones a medida que cocinamos, versus tener la receta ya traducida antes de empezar. Este 
          enfoque permite a JavaScript ser altamente flexible, pero también implica que el chequeo de tipos sucede de manera dinámica.
    
    ## ¿Qué significa que JavaScript tenga un "tipado débil"?
        # El tipado débil es una de las características que distingue a JavaScript. Esto significa que JavaScript permite más flexibilidad
         al asignar valores a las variables. Por ejemplo, puedes asignar un número a una variable y luego asignar un string al mismo espacio 
         de memoria sin errores. Así, JavaScript maneja situaciones inusuales, como sumar un número y un valor booleano, mediante la conversión
        implícita de tipos, convirtiendo los valores a un tipo compatible para seguir la ejecución. Ejemplo:

            # const numero = 2; const booleano = true;
            # const resultado = numero + booleano; // Esto resulta en 3 porque el booleano true lo hace 1

    ## ¿Cuáles son los tipos de conversión en JavaScript?

        # Conversión implícita:
            # JavaScript realiza automáticamente sin que el programador precise intervención, como en el caso de sumar un número con un booleano.

        # Conversión explícita:
            # El programador decide convertir manualmente un tipo de dato a otro, por ejemplo, transformando un booleano en un string o en un
              número.

        # Ejemplo:

            # let booleano = true;
            # et booleanToString = booleano.toString(); // convierte a "true"
            # let booleanToNumber = Number(booleano); // convierte a 1

    ## ¿Por qué es importante entender la conversión de tipos?
        # Comprender la conversión de tipos en JavaScript es crucial para evitar errores durante la ejecución, especialmente cuando el lenguaje 
          realiza conversiones implícitas que pueden llevar a resultados inesperados. Saber cuándo y cómo utilizar la conversión explícita te 
          permitirá tener un mayor control sobre cómo se manejan los datos en tus aplicaciones, mejorando la calidad y eficacia de tu código.

        # La conversión de tipos es un tema importante que obliga a los desarrolladores a ser conscientes de las implicaciones de cómo se manejan 
          los datos en un lenguaje tan dinámico como JavaScript. Dominar este concepto te permitirá navegar con mayor confianza en el mundo del 
          desarrollo web, optimizando tus soluciones y mejorando tu experiencia de codificación. ¡Sigue explorando y perfeccionando tus habilidades!


### Conversion de tipos en JavaScript: Implicita y Explicita parte 2

    ## ¿Qué es el typecasting explícito en JavaScript?
        # Typecasting en JavaScript se refiere a convertir tipos de datos de manera explícita o implícita. Comencemos explorando la conversión 
          explícita de tipos, uno de los métodos más comunes para manejar diferentes tipos de datos en nuestros programas.

        # Podemos convertir un string a un tipo numérico usando funciones como parseInt() y parseFloat(). Por ejemplo, podemos tener un string 
        con un número "42" y convertirlo a un entero así:
            # const integer = parseInt("42");
            # console.log(typeof integer); // number

        # De manera similar, para convertir un string decimal como "3.14" a un número flotante:
            # const float = parseFloat("3.14");
            # console.log(typeof float); // number
        # JavaScript no distingue entre números enteros y decimales en cuanto al tipo de dato, ambos son considerados como number.

    ## ¿Cómo se convierte de binario a decimal?
        # Es posible convertir un número binario a decimal utilizando parseInt() con la base adecuada. Aquí un ejemplo práctico:
            # const binary = "1010";
            # const decimal = parseInt(binary, 2);
            # console.log(decimal); // 10
        # Este código convierte el número binario "1010" a su representación decimal que es 10.

    ## ¿Qué es el typecasting implícito en JavaScript?
        # JavaScript puede realizar conversiones de tipo sin intervención explícita del programador, esto se conoce como typecasting implícito.
         La suma de un string con un número ilustra este caso:
            # const resultado = "5" + 3;
            # console.log(resultado); // 53
        # En este ejemplo, JavaScript convierte el número 3 a un string y lo concatena con "5", dando como resultado "53".

    ## ¿Qué sucede con los booleanos?
        # Al combinar booleanos y otros tipos de datos, JavaScript también realiza conversiones. Por ejemplo:
            # const sumaConBoolean = "3" + true;
            # console.log(sumaConBoolean); // "3true"
        # Aquí el booleano true es convertido a string y luego concatenado. Sin embargo, si sumamos booleanos con números:
            # const sumaConNumero = 2 + true;
            # console.log(sumaConNumero); // 3
        # El booleano true es transformado a 1, resultando en una suma numérica.
    

### Operadores de Comparación en JavaScript: Igualdad y Desigualdad

    ## ¿Qué es la ejecución condicional en programación?
        # La ejecución condicional es un concepto clave en programación que nos permite tomar diferentes caminos en nuestro código según ciertas
          condiciones. Esto se logra mediante el uso de operadores de comparación, los cuales evalúan expresiones para determinar si son 
          verdaderas o falsas. Esta evaluación nos facilita la toma de decisiones dentro del código, permitiendo ejecutar ciertas partes solo 
          si las condiciones establecidas se cumplen.
    
    ## ¿Qué son los operadores de comparación?
        # Los operadores de comparación son herramientas esenciales en el desarrollo de software que permiten comparar dos valores. Dependiendo 
        de la comparación realizada, estas herramientas devuelven un valor booleano (verdadero o falso).

    ## ¿Cómo usar los operadores de igualdad?
        # Existen dos tipos principales de operadores de igualdad:
            # Diferente (!=):  Este operador comprueba si dos valores no son iguales, sin considerar el tipo de dato.
                # 10 != "20" // Devuelve true

            # Diferente estricto (!==): Valida que tanto el valor como el tipo de dato sean diferentes.
                # 10 !== "10" // Devuelve true

    ## ¿Cuándo se utilizan los operadores de mayor y menor?
        # Estos operadores nos ayudan a comparar valores para identificar cuál es mayor o menor, además de sus combinaciones con igualdad:
            # Mayor (>): Verifica si un valor es mayor que otro.
                # 20 > 10 // Devuelve true
            
            # Menor (<): Verifica si un valor es menor que otro.
                # 10 < 20 // Devuelve true

            # Mayor o igual (>=): Comprueba si un valor es mayor o igual a otro.
                # 10 >= 10 // Devuelve true

            # Menor o igual (<=): Revisa si un valor es menor o igual a otro.
                # 5 <= 10 // Devuelve true

    ##  ¿Cómo aplicar operadores de comparación en la práctica? Ejemplo de comparaciones:
        # Declaración de variables
            # const A = 10; // number
            # const B = 20; // number
            # const C = "10"; // string

        # Validar igualdad de valores:
            # A == B // Devuelve false
            # A === C // Devuelve false

        # Validar desigualdad de valores:
            # A != B // Devuelve true
            # A !== C // Devuelve true

        # Evaluar operadores mayor y menor:
            # A > B // Devuelve false
            # A < B // Devuelve true
            # A >= C // Devuelve false
            # A <= B // Devuelve true


### Operadores Lógicos en Programación: AND, OR y NOT

    ## ¿Qué son los operadores lógicos?
        # Los operadores lógicos son fundamentales para manejar condiciones y tomar decisiones en nuestros programas. Son tres: 
           AND, OR y NOT. Estos operadores nos permiten validar múltiples condiciones de manera simultánea o individual. Comprender 
           su funcionamiento nos ayudará a mejorar la lógica de nuestra programación y nos permitirá crear sistemas más robustos.

    ## ¿Cómo funciona el operador AND? 
        # El operador AND (y) se utiliza cuando queremos verificar si múltiples condiciones son verdaderas al mismo tiempo. Si todas 
           las condiciones que se evalúan son verdaderas, el resultado será true; de lo contrario, será false. 
           
        # Por ejemplo, consideremos los siguientes valores constantes en un código JavaScript:
            # const A = 10; // number
            # const B = 20; // number
            # const C = "10"; // string

        # Si queremos verificar si A es igual a B y A también es estrictamente igual a C, nuestro código sería:

            # if (A === B && A === C) {// Código a ejecutar si ambos son iguales} // false
            # En este caso, el resultado sería false porque, aunque el valor de A es 10 y coincide con el valor numérico de C, no son del 
               mismo tipo (el primero es un número y el segundo un string).
        
    ## ¿Qué hace el operador OR?
        # El operador OR (o) es útil cuando queremos que al menos una de varias condiciones se cumpla. Si al menos una condición es verdadera, 
           el resultado será true.
        
        # Siguiendo el ejemplo anterior:
            # if (A !== B || A === C) { // Código a ejecutar si al menos una condición es verdadera} // true
            #  De este código, resulta true porque A es efectivamente diferente de B. Aunque A no es igual a C en tipo, el operador OR 
                solo necesita que una de las condiciones se cumpla.

    ## ¿Cómo se utiliza el operador NOT?   
        # El operador NOT (no) resulta muy útil cuando queremos invertir el resultado de una evaluación. Si aplicamos NOT a una condición, 
           convertimos true en false y viceversa.
        # Tomemos el siguiente ejemplo:
            # if (!(A === C)) {// Código a ejecutar si A NO es igual a C} // false
            # Aquí, A === C es false porque no son del mismo tipo de datos, pero al aplicar el operador NOT, el resultado final es true.
    
    # Aplicaciones de los operadores lógicos
        # En el desarrollo de software, los operadores lógicos son esenciales para construir algoritmos complejos que requieren decisiones 
           condicionadas. Estas decisiones no se limitan solo a operaciones numéricas; se expanden a la validación de parámetros de entrada, 
           la gestión de errores, y la aplicación de lógica comercial en sistemas de software, entre otros.


### Estructuras Condicionales: Uso de IF, ELSE y ELSE IF en JavaScript

    ## ¿Cómo funcionan las estructuras condicionales en JavaScript?
        # Al programar, uno de los conceptos fundamentales a dominar son las estructuras condicionales, también conocidas como estructuras de 
          control. Estas estructuras nos permiten decidir qué parte de nuestro código se ejecutará basado en ciertas condiciones. En JavaScript,
          la estructura condicional más básica es la sentencia if, que nos permite ejecutar un bloque de código sólo si una determinada 
          condición es verdadera.

        # Para utilizar la estructura if, se deben emplear operadores que nos ayuden a crear condiciones lógicas que puedan evaluarse como 
           verdaderas o falsas. Estos operadores pueden ser de comparación como ==, ===, !=, !== o de relación como <, >, <=, >=.

    ## ¿Cómo se usa la estructura if?
        # Aquí se explica cómo funciona la estructura if con ejemplos prácticos:    
            # let nombre = "Diego";
            # if (nombre === "Diego") { console.log("Hola Diego"); }

    ## ¿Qué es el else y cómo funciona?
        # El else se utiliza cuando queremos que se ejecute un bloque de código diferente si la condición del if no se cumple. Sirve como una 
           instrucción por defecto en caso de que ninguna de las condiciones anteriores sea verdadera.
            # let nombre = "Nico";
            # if (nombre === "Diego") { console.log("Hola Diego"); } else { console.log("Nombre no encontrado"); }

        # En el ejemplo anterior, si la variable nombre no es igual a "Diego", se ejecutará el bloque de código dentro del else,
           mostrando "Nombre no encontrado".

    ## ¿Cómo se implementa else if para múltiples condiciones?
        # Para evaluar múltiples condiciones, se puede extender la estructura con else if. Esto nos permite comprobar varias condiciones en serie.
            #  let nombre = "Nico";
            # if (nombre === "Diego") {console.log("Hola Diego");}
            # else if (nombre === "Nico") { console.log("Hola Nico");}
            # else { console.log("Nombre no encontrado"); }

        # Aquí, primero se verifica si nombre es igual a "Diego". Si no es así, se comprueba la siguiente condición else if para "Nico", y en 
           caso de que ninguna de las condiciones anteriores sea verdadera, se ejecuta el bloque dentro del else.

    ## ¿Por qué usar estructuras condicionales es crucial en programación?
        # Las estructuras condicionales son esenciales porque nos permiten tomar decisiones dentro del código basadas en condiciones dinámicas. 
           Facilitan la creación de programas más interactivos y adaptativos, donde el flujo de ejecución puede variar dramáticamente dependiendo
           de los datos de entrada. Gracias a la capacidad de evaluar condiciones, podemos crear código robusto y flexible que responde según
           diferentes escenarios, lo que es crucial para el desarrollo de aplicaciones y la automatización de procesos.

    ## Operador Ternario 
        #  ¿Qué es el operador ternario?
            # El operador ternario es una forma concisa de escribir una sentencia condicional if...else. Su nombre "ternario" se debe a que 
               tiene tres operandos: una condición, una expresión si es verdadera, y otra si es falsa.
        
        # Sintaxis general:
            # condición ? valorSiVerdadero : valorSiFalso;

        # Ejemplo simple:
            # const edad = 20;
            # const mensaje = edad >= 18 ? 'Mayor de edad' : 'Menor de edad';
            # console.log(mensaje); // "Mayor de edad"

        # El operador ternario (también llamado condicional ternario) existe en muchos lenguajes populares, como:
            # JavaScript, C / C++, Java, PHP, Swift, C#, Ruby.

        # Cuándo usar el operador ternario:
            # Quieres una condición simple y clara en una sola línea.
            # Solo estás asignando un valor, o haciendo una pequeña acción.
            # Quieres mejorar la legibilidad y reducir código repetitivo.

        #  Cuándo NO usarlo:
            # La lógica es compleja o anidada.
            # Hay efectos secundarios o múltiples acciones dentro de la condición.
            # Puede dificultar la legibilidad para otros desarrolladores (o para ti en el futuro).

        # Ejemplo no recomendable: 
            # const resultado = score > 90 ? "Excelente" : score > 75 ? "Bien" : score > 60 ? "Regular" : "Reprobado";


### Estructura y uso del condicional Switch en programación

    ## ¿Qué es un Switch y cómo se utiliza en programación?
        # El uso de la estructura de control Switch es fundamental en la programación para manejar múltiples escenarios basados en una 
           expresión específica. Comparable a if, else if, else, Switch permite múltiples validaciones, pero con una diferencia esencial: 
           evalúa solo si una expresión es verdadera y no múltiples condiciones.
        
        # A diferencia de los operadores comparativos en las estructuras if, Switch se utiliza exclusivamente para validar si la expresión 
           que estamos evaluando es true. Pero, ¿cómo configuramos un Switch y qué componentes esenciales componen su estructura?

    ## ¿Cómo funciona la estructura básica de Switch?
        # La estructura de un Switch comienza definiendo una expresión entre paréntesis. Esta expresión es la condición a evaluar. Después, 
           mediante la creación de múltiples casos (case), se especifica qué debe suceder si la expresión coincide con un valor determinado. 
           Veamos cómo se configura:

            # switch (expresion){
            #   case valor1:
            #   // Código a ejecutar si expresion === valor1
            #   break; // Termina el switch
            #   case valor2:
            #   case valor3:
            #   // Código a ejecutar si expresion === valor2 o expresion === valor3
            #    break; // Termina el switch
            #   // Puedes agregar más casos según sea necesario
            #   default:
            #   // Código a ejecutar si no coincide con ningún caso
            #   break;} // Termina el switch
                
    ## ¿Cuál es la importancia de 'break' y 'default' en Switch?
        # La instrucción break en un Switch es crucial porque evita la ejecución de casos posteriores una vez que se ha encontrado un true. 
           En caso de que ninguna condición se cumpla, podemos definir un default para gestionar escenarios no previstos y ofrecer respuestas 
           predefinidas.
            
            # break: Interrumpe la ejecución del Switch de manera que, una vez validado un caso, no se continúa evaluando los siguientes.
            # default: Se utiliza como el "else" de un Switch, proporcionando una salida cuando ninguna condición es verdadera.
    
    ## ¿Cuándo es ideal usar un Switch en lugar de if-else?
        # Switch es ideal cuando se debe evaluar una sola variable o expresión contra múltiples valores literales. A diferencia de if-else, 
           que es más flexible para comparaciones complejas (como mayor o menor que), Switch funciona únicamente con comparación estricta 
           (como si usáramos el triple igual ===). Por lo tanto, al elegir entre ambos, considere:

           # Mayor legibilidad: Switch para condiciones con muchas ramas predefinidas.
           # Comparaciones simples: Switch es más eficiente para igualdad exacta.
           # Casos especiales: Use if-else para complejidad lógica o comparaciones avanzadas.
        
        # A través del uso de Switch, los programadores pueden diseñar flujos de decisión más organizados y eficientes en situaciones donde solo
           se necesita verificar igualdad de valores.


### Ciclo For: Iteración de Listas y Uso de Console.log en JavaScript

    ## ¿Cómo utilizar un bucle "for" en JavaScript?
        # El "for" es una de las estructuras más fundamentales y poderosas en JavaScript para realizar iteraciones o loops, permitiendo recorrer 
           elementos dentro de una lista o array.

    ## ¿Qué es el método "for" y cómo estructurarlo?
        # El método "for" en JavaScript es una herramienta que nos permite repetir la ejecución de un bloque de código hasta que una condición 
           especificada sea falsa. Consta de tres pasos principales dentro de sus paréntesis:

            # Inicialización: Se define una variable de control (comúnmente 'i'), asignando un valor inicial. Por ejemplo, let i = 0.
            # Condición: Evalúa la condición que debe cumplirse para que el loop continúe. Normalmente, se compara la variable de control con 
                          una longitud. Un ejemplo es i < lista.length.
            # Incremento: Modifica la variable de control en cada iteración, generalmente incrementándola en uno (i++).

        # La estructura básica es la siguiente:
            # for (let i = 0; i < lista.length; i++) { // Código a ejecutar }

    ## ¿Cómo iterar con "for" sobre un array?
        # Para hacerlo más práctico, haremos un ejemplo. Supongamos que tenemos un array con varios elementos que deseamos imprimir en la consola.

        # Ejemplo:
            # let lista = ["eat", "sleep", "code", "repeat"]; // Primero, definimos nuestro array
            # for (let i = 0; i < lista.length; i++) { console.log(lista[i]); } // Luego, implementamos el loop "for"
            # // Resultado: eat, sleep, code, repeat
    
    ## ¿Qué ocurre dentro del ciclo "for"?
        # Cada vez que el loop "for" se ejecuta, realiza los siguientes pasos:
            # 1- Verifica la condición: Si la condición es verdadera, se ejecuta el bloque de código dentro del loop.
            # 2- Ejecución del código: Imprime el elemento actual del array.
            # 3- Incremento: Aumenta el valor de i para moverse al siguiente elemento.
            # 4- Reevaluación: Vuelve a comprobar la condición; si sigue siendo verdadera, repite el ciclo. Si no, se detiene.

    ## Consideraciones y consejos prácticos
        # Simplicidad e inicialización: Usa nomenclatura consistente, como let i = 0, para mantener claridad.
        # Evita bucles infinitos: Asegúrate de que la condición eventualmente sea falsa añadiendo un incremento adecuado.
        # Versatilidad del "for": Aunque hicimos un ejemplo básico con console.log, el "for" puede adaptarse a tareas más complejas 
                                   transformando o acumulando datos.

                                
### Iteración con for-of en JavaScript para arrays y strings
    ## ¿Qué es el método loop for-of y cómo funciona?
        # El método loop for-of es una herramienta poderosa en programación que te permite iterar sobre objetos iterables. Aunque puede parecer 
           complicado al principio, su aplicación se vuelve intuitiva una vez que entiendes su funcionamiento y sus aplicaciones prácticas. El 
           nombre "for-of" ya es bastante descriptivo: se trata de recorrer elemento por elemento de una colección. 

    ## ¿Cuál es la estructura de for-of?
        # Para implementar un for-of, debes seguir una estructura básica:
            # Comienza con la palabra reservada for.
            # Añade paréntesis (), donde se define una variable que representa cada elemento.
            # El uso del término of seguido del objeto iterable que estás recorriendo.
            # Finalmente, abre llaves {} para incluir el bloque de código que se ejecutará para cada elemento.

        # Ejemplo en codigo:
            # let canasta = ['manzana', 'pera', 'naranja', 'uva'];
            # for (let fruta of canasta) { console.log(fruta); } // imprime manzana pera naranja uva
        
    ## ¿Cuáles son los aspectos importantes a recordar?
        # Limitaciones a objetos iterables: Solo los objetos iterables como arrays y strings pueden ser utilizados, no aplica para objetos no 
           iterables.
        # Uso práctico y específico: Recuerda que el for-of es ideal para casos donde quieres acceder a los valores directamente, y no a los 
           índices como ocurre con for-in.
        # Dentro del for of, la variable fruta se declara como const, let o var exploremos las diferencias:
            # Las declaraciones de variables LET o CONST tienen block scope (Block scope significa que la variable solo existe dentro del 
               bloque {} donde se declara)
            # Las declracion de variable VAR tienen scope (Scope significa que la variable puede ser modificada dentro y fuera del for, pero
                su alcance es de funcion o global si se declara fuera de una funcion.)

### Iteración sobre Objetos con forIn en JavaScript
    ## ¿Cómo utilizar el bucle forIn en JavaScript?
        # El bucle forIn es una poderosa herramienta en JavaScript, especialmente útil para iterar sobre propiedades de objetos. A diferencia 
           del forOff, que trata con elementos iterables como arreglos y cadenas, forIn se centra en objetos ennumerables no iterables. Pero, ¿por qué es 
           tan importante entender esta distinción? Porque los objetos en JavaScript poseen propiedades, cada una con un valor asociado, y el 
           conocimiento de cómo navegar por estas estructuras es crucial para cualquier desarrollador.

    ## ¿Cuál es la estructura de un objeto en JavaScript?
        # Los objetos en JavaScript son estructuras de datos que permiten almacenar información de manera más compleja que los arreglos o 
           cadenas. A diferencia de estos últimos, que son sencillamente listas de elementos, los objetos están compuestos por "propiedades" 
           y "valores" asociados.

            # Propiedad: un identificador dentro del objeto.
            # Valor: cualquier tipo de dato asociado a la propiedad, que puede ser un número, string, booleano, función, u otro objeto.

        # Ejemplo de un objeto
            # const listaDeCompras = { manzana: 5, pera: 3, naranja: 2, uva: 1 };
            #  En este caso, manzana, pera, naranja y uva son las propiedades del objeto, y los números asociados representan los valores 
                deseados de cada fruta.

    ## ¿Cómo funciona el bucle forIn?
        # El forIn se utiliza principalmente para iterar sobre objetos, permitiendo acceder a todas sus propiedades y valores. La sintaxis 
           básica del forIn es:
            # for (variable in objeto) { // Código a ejecutar }
                # variable es la que representará cada propiedad del objeto durante la iteración.
                # objeto es el objeto que estamos iterando.

        # ejemplo práctico mostrando cómo funciona:
            # const listaDeCompras = { manzana: 5, pera: 3, naranja: 2, uva: 1 };
            # // Iterar sobre cada propiedad del objeto
            # for (let fruta in listaDeCompras)                                                    { 
              console.log(fruta); // Imprime la propiedad (manzana, pera, etc.) 
              console.log(listaDeCompras[fruta]); // Imprime el valor de la propiedad (5, 3, etc.) }
            # En este ejemplo, el bucle forIn recorre cada propiedad del objeto listaDeCompras, imprimiendo tanto la propiedad como su valor.
        
    ## ¿Por qué no usar forOff con objetos?
        # Es crucial comprender que forOff se emplea únicamente con estructuras iterables como arrays y strings. Los objetos, al no ser 
           iterables, generan un error cuando se intenta iterar sobre ellos con forOff. Ejemplo porque for in es necesario :
            # const listaDeCompras = { manzana: 5, pera: 3, naranja: 2, uva: 1 };
            # for (let fruta of listaDeCompras) { console.log(fruta); } // Esto generará un error: "listaDeCompras no es iterable"

        # El uso de forOff en un objeto lanzará un error porque JavaScript no reconoce a los objetos como colecciones sobre las cuales pueda 
           iterar directamente. Esta diferenciación entre objetos iterables e innumerables es clave para evitar errores y garantizar que las 
           operaciones sobre objetos se realicen correctamente.

    ## Buenas prácticas al usar forIn
        # Verificar propiedades del objeto: En casos donde estás iterando sobre objetos que pueden heredar propiedades, es recomendable verificar
         si la propiedad pertenece directamente al objeto.
            # for (let prop in objeto) {
              if (objeto.hasOwnProperty(prop)) 
              { // Código a ejecutar } }

        # Documentación clara: Al trabajar con objetos complejos, asegúrate de mantener una buena documentación sobre las propiedades y los 
                                valores que estás manejando, para facilitar la lectura y el mantenimiento del código.

        # Considerar métodos avanzados: Aunque el forIn es útil, también existen métodos en ECMAScript para más avanzados como Object.keys(), 
           Object.values(), o Object.entries(), para el for-of que pueden proporcionar un manejo más directo de las propiedades y valores de 
           un objeto.
        

### Uso del ciclo while para iteración en programación

    ## ¿Qué es el método while en programación?
        # El método while es una estructura de control de flujo utilizada en programación para repetir un bloque de código mientras una condición 
           específica sea verdadera. Esta técnica permite realizar iteraciones eficientes, ejecutando una secuencia de instrucciones repetidamente 
           hasta que la condición evaluada deje de cumplirse.

    ## ¿Cómo funciona la estructura de un ciclo while?
        # La estructura de un ciclo while en programación implica utilizar la palabra clave reservada while, seguida de una condición. Este 
           ciclo continuará ejecutando el código contenido en su bloque interno hasta que dicha condición se torne falsa. La estructura básica 
           es sencilla, pero su implementación debe manejarse con precaución para evitar conflictos como los 'loops' infinitos.

    ## Estructura básica de un ciclo while:
        # while (condición) { // Código a ejecutar mientras la condición sea verdadera }

    ## ¿Cómo podemos evitar los loops infinitos?
        # Los loops infinitos ocurren cuando la condición en un ciclo while nunca se vuelve falsa, permitiendo que el ciclo continúe indefinidamente.
           Esto puede llevar al consumo excesivo de recursos del sistema y, por ende, a inestabilidades en las aplicaciones. Para evitarlo:
            # Control y actualización de la condición: Asegúrate de modificar las variables involucradas en la condición dentro del bloque del ciclo. 
              Esto garantiza que eventualmente el ciclo pueda salir.

        # Ejemplo con un contador:
            # let contador = 0;
              while (contador < 10) {
              console.log(contador); contador++; // Incremento que evita el loop infinito }

    ## ¿Qué implica el procesamiento de un ciclo while en el navegador?
        # Implementar un ciclo while en las aplicaciones front-end, como las que corren en el navegador, requiere cuidado. Un loop infinito 
           podría consumir toda la memoria RAM disponible, afectando severamente el rendimiento de las pestañas abiertas o incluso el navegador 
           completo. Por ello, es esencial:
            # Mantener condiciones claras y alcanzables.
            # Monitorear el rendimiento: Usa herramientas de desarrollo para observar el uso de memoria y CPU.
            # Vigilar comportamientos anómalos tras introducir un nuevo while.

    ## ¿Cómo puedo optimizar mis ciclos while?
        # Define claramente las condiciones de entrada y salida.
        # Realiza pruebas exhaustivas con diferentes escenarios de valores.
        # Utiliza incrementos o decrementos que acerquen tu variable a la cumplirse la condición.
        # Documenta y revisa el código con herramientas de análisis estático si es posible.


### Ciclos doWhile: Estructura y Diferencias con While
    ## ¿Cómo se implementa un ciclo doWhile en programación?
        # ¿Alguna vez te has preguntado cómo lograr que un segmento de código se ejecute repetidamente hasta cumplir una determinada condición? 
          El ciclo doWhile es una técnica eficaz para lograrlo. Este método asegura que ciertas tareas se repitan, garantizando así la ejecución 
          de eventos hasta alcanzar el resultado esperado, siempre y cuando se cumpla una condición.
    
    ## ¿Cuál es la estructura de un ciclo doWhile?
        # La implementación de un ciclo doWhile en programación sigue una estructura específica. Aquí te presentamos los pasos básicos:
            # Se comienza con la palabra clave do.
            # Dentro de los corchetes {}, se escribe el código que deseamos ejecutar.
            # se utiliza la palabra clave while, seguida de la condición que debe cumplirse para que el ciclo continúe ejecutándose.
    
    ## Ejemplo práctico de doWhile
        # do { console.log(contador); contador++; } while (contador < 10);

    ## ¿Cuál es la diferencia entre un ciclo while y un ciclo doWhile?
        # La interrogante que suele surgir es: ¿para qué usar un doWhile en lugar de un simple while? La diferencia fundamental es cómo estos ciclos 
          abordan la ejecución del código y la verificación de condiciones:
            # En un doWhile, el código siempre se ejecuta al menos una vez antes de evaluar la condición.
            # En un while, primero se verifica si la condición es verdadera antes de ejecutar el código.
        
    ## Cuándo usar doWhile en lugar de while
        # Opta por doWhile cuando requieras que el código se ejecute al menos una vez, independientemente de si la condición es verdadera al inicio. 
           Por otro lado, utiliza while si deseas asegurar que el código solo se ejecuta cuando la condición inicial se cumple.

    ## Consejos prácticos para implementaciones efectivas
        # Evita bucles infinitos: Asegúrate de modificar las variables involucradas en la condición para evitar que el ciclo corra indefinidamente.
        # Prueba tus condiciones: Verifica que la condición sea alcanzable para garantizar la finalización adecuada del ciclo.
        # Debugging y logs: Utiliza console.log para comprender el flujo de tu ciclo y depurar problemas potenciales.


### Funciones en JavaScript: Cómo Calcular Precios con Descuentos

    ## ¿Qué es una función en JavaScript?
        # Las funciones en JavaScript son bloques de código reutilizables que permiten realizar tareas específicas una y otra vez. Imagina que 
           son como piezas de Lego: puedes utilizarlas para crear múltiples objetos con las mismas piezas. Son una herramienta poderosa que, 
           una vez definida, puede utilizarse repetidamente con distintos conjuntos de datos, al igual que usarías un cálculo una y otra vez 
           durante un evento de Black Friday para aplicar descuentos automáticamente a los precios de ropa. Gracias a las funciones, evitamos 
           duplicar código, ahorramos tiempo y minimizamos errores.

    ## ¿Cómo se estructura una función?
        # Una función en JavaScript tiene una estructura clara, conocida como su "anatomía". Cada parte cumple un papel crucial en su funcionamiento:

        # Definición de la función:
            # Comienza con la palabra clave function.
            # Sigue el nombre de la función, que debe estar en camelCase (la primera letra minúscula y las iniciales de palabras subsiguientes 
            en mayúsculas).

        # Parámetros:
            # Los parámetros son variables que la función utiliza internamente para procesar datos. Son opcionales y permiten que la función sea
               más flexible.

        # Cuerpo de la función:
            # Se encierra entre llaves {}.
            # Es donde se escribe el código que la función ejecutará. Puede incluir un return para devolver un valor al finalizar la ejecución, 
              aunque esto también es opcional.

        # Llamado de función:
            # Para ejecutar una función, se utiliza su nombre seguido de paréntesis que, opcionalmente, contienen argumentos; estos son los valores
               reales que reemplazan a los parámetros.

    ## ¿Cómo crear funciones para calcular descuentos?
        # Veamos la creación paso a paso de una función que calcule el precio después de aplicar un descuento:

            # function calculateDiscountedPrice(price, discountPercentage) { 
                const discount = (price * discountPercentage) / 100; 
                const priceWithDiscount = price - discount; 
                return priceWithDiscount; }


### Diferencias entre Funciones y Métodos en JavaScript

    ## ¿Cuáles son las diferencias entre funciones y métodos en JavaScript? 

        # Funciones:
            # Son bloques de código que realizan una tarea específica y se pueden llamar desde cualquier lugar del código. Son independientes y 
              no están asociadas a ningún objeto en particular. Las funciones se declaran usando la palabra clave function (o const/let para 
              funciones anónimas).

        # Metodos: 
            # Son funciones que están asociadas a un objeto. Los métodos son invocados a través del objeto al cual pertenecen. Normalmente, 
              un método se define como una propiedad de un objeto, con el valor de la propiedad siendo una función.


### 